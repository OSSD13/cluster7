<?php

namespace Database\Factories;

use App\Models\SprintReport;
use App\Models\Sprint;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Carbon;

class SprintReportFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = SprintReport::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        $teamNames = ['Frontend Team', 'Backend Team', 'QA Team'];
        $boardName = $this->faker->randomElement($teamNames);
        $isAutoGenerated = $this->faker->boolean(30);
        
        // Try to find a sprint or create one if none exist
        try {
            $sprint = Sprint::inRandomOrder()->first();
            if (!$sprint) {
                // Create a default sprint if none exists
                $startDate = now()->startOfWeek();
                $endDate = $startDate->copy()->addDays(6);
                
                $sprint = Sprint::create([
                    'sprint_number' => 1,
                    'start_date' => $startDate->toDateString(),
                    'end_date' => $endDate->toDateString(),
                    'duration' => 7,
                    'status' => 'active',
                    'progress_percentage' => 50,
                    'days_elapsed' => 3,
                    'days_remaining' => 4,
                ]);
            }
        } catch (\Exception $e) {
            // If we can't get a sprint, create an in-memory one for data generation
            $startDate = now()->startOfWeek();
            $sprint = new Sprint([
                'id' => 1,
                'sprint_number' => 1,
                'start_date' => $startDate,
                'end_date' => $startDate->copy()->addDays(6),
                'duration' => 7,
            ]);
        }
        
        $user = User::inRandomOrder()->first();
        if (!$user) {
            $user = User::factory()->create();
        }
        
        // Use the SavedReportFactory to generate report data
        $savedReportFactory = new SavedReportFactory($this->faker);
        $reportData = $savedReportFactory->generateReportData($boardName);
        
        // Extract specific data from the structured report data
        $storyPointsData = [
            'summary' => $reportData['summary'],
            'teamMembers' => $reportData['teamMembers'],
            'totals' => $reportData['totals'],
        ];
        
        $bugCardsData = [
            'bugCards' => $reportData['bug_cards'][$boardName] ?? [],
            'bugCount' => $reportData['bugCount'],
            'totalBugPoints' => $reportData['totalBugPoints'],
        ];
        
        $backlogData = null;
        if (!empty($reportData['backlog'][$boardName]) && count($reportData['backlog'][$boardName]) > 0) {
            $backlogData = [
                'bugCards' => $reportData['backlog'][$boardName],
                'bugCount' => $reportData['backlogBugCount'],
                'totalBugPoints' => $reportData['backlogTotalPoints'],
            ];
        }
        
        // Generate a datetime within the sprint period
        $reportDate = now();
        try {
            $reportDate = Carbon::create(
                $sprint->start_date->year,
                $sprint->start_date->month,
                $sprint->start_date->day
            )->addDays($this->faker->numberBetween(0, $sprint->duration - 1));
        } catch (\Exception $e) {
            // If date creation fails, use the current date
        }
        
        return [
            'sprint_id' => $sprint->id,
            'user_id' => $user?->id,
            'board_id' => 'board_' . substr(md5($boardName), 0, 8),
            'board_name' => $boardName,
            'report_name' => "Sprint {$sprint->sprint_number} Report: {$boardName}" . ($isAutoGenerated ? ' (Auto)' : ''),
            'notes' => $this->faker->optional(0.7)->paragraph(),
            'story_points_data' => $storyPointsData,
            'bug_cards_data' => $bugCardsData,
            'backlog_data' => $backlogData,
            'is_auto_generated' => $isAutoGenerated,
            'created_at' => $reportDate,
            'updated_at' => $reportDate,
        ];
    }
    
    /**
     * Configure the factory to generate an auto report.
     *
     * @return $this
     */
    public function auto()
    {
        return $this->state(function (array $attributes) {
            $sprintId = $attributes['sprint_id'] ?? null;
            $sprintNumber = null;
            
            if ($sprintId) {
                try {
                    $sprint = Sprint::where('id', $sprintId)->first();
                    if ($sprint) {
                        $sprintNumber = $sprint->sprint_number;
                    }
                } catch (\Exception $e) {
                    // Sprint not found or error accessing it
                }
            }
            
            // If no sprint found, try to get current sprint
            if (!$sprintNumber) {
                $currentSprint = Sprint::getCurrentSprint();
                if ($currentSprint) {
                    $sprintNumber = $currentSprint->sprint_number;
                    // Update the sprint_id to match
                    $sprintId = $currentSprint->id;
                } else {
                    // Last resort - use a default number
                    $sprintNumber = 1;
                }
            }
            
            $boardName = $attributes['board_name'] ?? 'Unknown Team';
            
            $reportName = "Sprint {$sprintNumber} Report: {$boardName} - Auto Generated";
            
            return [
                'report_name' => $reportName,
                'is_auto_generated' => true,
                'sprint_id' => $sprintId,
            ];
        });
    }
    
    /**
     * Configure the factory to generate a manual report.
     *
     * @return $this
     */
    public function manual()
    {
        return $this->state(function (array $attributes) {
            $sprintId = $attributes['sprint_id'] ?? null;
            $sprintNumber = null;
            
            if ($sprintId) {
                try {
                    $sprint = Sprint::where('id', $sprintId)->first();
                    if ($sprint) {
                        $sprintNumber = $sprint->sprint_number;
                    }
                } catch (\Exception $e) {
                    // Sprint not found or error accessing it
                }
            }
            
            // If no sprint found, try to get current sprint
            if (!$sprintNumber) {
                $currentSprint = Sprint::getCurrentSprint();
                if ($currentSprint) {
                    $sprintNumber = $currentSprint->sprint_number;
                    // Update the sprint_id to match
                    $sprintId = $currentSprint->id;
                } else {
                    // Last resort - use a default number
                    $sprintNumber = 1;
                }
            }
            
            $boardName = $attributes['board_name'] ?? 'Unknown Team';
            
            $reportName = "Sprint {$sprintNumber} Report: {$boardName} - Manual";
            
            return [
                'report_name' => $reportName,
                'is_auto_generated' => false,
                'sprint_id' => $sprintId,
            ];
        });
    }
    
    /**
     * Configure the factory to generate a report for a specific team.
     *
     * @param string $teamName
     * @return $this
     */
    public function forTeam(string $teamName)
    {
        return $this->state(function (array $attributes) use ($teamName) {
            $sprintId = $attributes['sprint_id'] ?? null;
            $sprintNumber = null;
            
            if ($sprintId) {
                try {
                    $sprint = Sprint::where('id', $sprintId)->first();
                    if ($sprint) {
                        $sprintNumber = $sprint->sprint_number;
                    }
                } catch (\Exception $e) {
                    // Sprint not found or error accessing it
                }
            }
            
            // If no sprint found, try to get current sprint
            if (!$sprintNumber) {
                $currentSprint = Sprint::getCurrentSprint();
                if ($currentSprint) {
                    $sprintNumber = $currentSprint->sprint_number;
                    // Update the sprint_id to match
                    $attributes['sprint_id'] = $currentSprint->id;
                } else {
                    // Last resort - use a default number
                    $sprintNumber = 1;
                }
            }
            
            // Use the SavedReportFactory to generate report data
            $savedReportFactory = new SavedReportFactory($this->faker);
            $reportData = $savedReportFactory->generateReportData($teamName);
            
            // Extract specific data from the structured report data
            $storyPointsData = [
                'summary' => $reportData['summary'],
                'teamMembers' => $reportData['teamMembers'],
                'totals' => $reportData['totals'],
            ];
            
            $bugCardsData = [
                'bugCards' => $reportData['bug_cards'][$teamName] ?? [],
                'bugCount' => $reportData['bugCount'],
                'totalBugPoints' => $reportData['totalBugPoints'],
            ];
            
            $backlogData = null;
            if (!empty($reportData['backlog'][$teamName]) && count($reportData['backlog'][$teamName]) > 0) {
                $backlogData = [
                    'bugCards' => $reportData['backlog'][$teamName],
                    'bugCount' => $reportData['backlogBugCount'],
                    'totalBugPoints' => $reportData['backlogTotalPoints'],
                ];
            }
            
            return [
                'board_id' => 'board_' . substr(md5($teamName), 0, 8),
                'board_name' => $teamName,
                'report_name' => "Sprint {$sprintNumber} Report: {$teamName}",
                'story_points_data' => $storyPointsData,
                'bug_cards_data' => $bugCardsData,
                'backlog_data' => $backlogData,
            ];
        });
    }
    
    /**
     * Configure the factory to create reports with backlog data.
     *
     * @param int $count Number of backlog bugs to include
     * @return $this
     */
    public function withBacklog(int $count = 5)
    {
        return $this->state(function (array $attributes) use ($count) {
            $boardName = $attributes['board_name'] ?? 'Unknown Team';
            
            // Generate backlog data using SavedReportFactory
            $savedReportFactory = new SavedReportFactory($this->faker);
            $reportData = $savedReportFactory->generateReportData($boardName);
            
            // Add more backlog bugs
            $backlogBugs = [];
            $backlogTotalPoints = 0;
            
            for ($i = 0; $i < $count; $i++) {
                $priority = $this->getRandomPriority();
                $points = $this->faker->randomElement([1, 2, 3, 5, 8]);
                $backlogTotalPoints += $points;
                
                $backlogBugs[] = [
                    'id' => 'BUG-' . (2000 + $i),
                    'name' => 'Backlog: ' . $this->getRandomBugTitle(),
                    'url' => 'https://trello.com/c/' . substr(md5(uniqid()), 0, 8),
                    'points' => $points,
                    'assigned' => 'Backlog User',
                    'labels' => ['Bug', $priority, 'Backlog'],
                    'status' => 'active',
                ];
            }
            
            $backlogData = [
                'bugCards' => $backlogBugs,
                'bugCount' => $count . ' ' . ($count === 1 ? 'bug' : 'bugs'),
                'totalBugPoints' => $backlogTotalPoints,
            ];
            
            return [
                'backlog_data' => $backlogData,
            ];
        });
    }
    
    /**
     * Get a random bug title
     */
    private function getRandomBugTitle()
    {
        $savedReportFactory = new SavedReportFactory($this->faker);
        return $savedReportFactory->getRandomBugTitle();
    }
    
    /**
     * Get a random priority level
     */
    private function getRandomPriority()
    {
        $savedReportFactory = new SavedReportFactory($this->faker);
        return $savedReportFactory->getRandomPriority();
    }
} 